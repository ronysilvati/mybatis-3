/**
 *    Copyright 2009-2020 the original author or authors.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 29 18:59:24 GMT 2020
 */

package org.apache.ibatis.reflection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import org.apache.ibatis.reflection.Reflector;
import org.apache.ibatis.reflection.TypeParameterResolver;
import org.apache.ibatis.reflection.invoker.AmbiguousMethodInvoker;
import org.apache.ibatis.reflection.invoker.GetFieldInvoker;
import org.apache.ibatis.reflection.invoker.Invoker;
import org.apache.ibatis.reflection.invoker.MethodInvoker;
import org.apache.ibatis.reflection.invoker.SetFieldInvoker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Reflector_ESTest extends Reflector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Reflector reflector0 = new Reflector(class0);
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      Invoker invoker0 = reflector0.getGetInvoker("parameterAnnotations");
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(invoker0);
      
      Class<?> class1 = reflector0.getGetterType("parameterAnnotations");
      assertFalse(reflector0.hasDefaultConstructor());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class [[Ljava.lang.annotation.Annotation;", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertFalse(class1.isEnum());
      assertNotNull(class1);
      
      boolean boolean0 = reflector0.hasGetter("parameterAnnotations");
      assertFalse(reflector0.hasDefaultConstructor());
      assertTrue(boolean0);
      
      Invoker invoker1 = reflector0.getGetInvoker("parameterAnnotations");
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(invoker1);
      assertSame(invoker1, invoker0);
      
      Class<?> class2 = reflector0.getSetterType("parameterAnnotations");
      assertFalse(reflector0.hasDefaultConstructor());
      assertEquals("class [B", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertNotNull(class2);
      assertNotSame(class2, class1);
      assertFalse(class2.equals((Object)class1));
      
      Invoker invoker2 = reflector0.getSetInvoker("parameterAnnotations");
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(invoker2);
      
      boolean boolean1 = Reflector.canControlMemberAccessible();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        reflector0.getSetterType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no setter for property named '' in 'class java.lang.reflect.Method'
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Reflector reflector0 = new Reflector(class0);
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      String string0 = "parameterAnnotations";
      Class<?> class1 = reflector0.getSetterType("parameterAnnotations");
      assertFalse(reflector0.hasDefaultConstructor());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class [B", class1.toString());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertFalse(class1.isEnum());
      assertNotNull(class1);
      
      Invoker invoker0 = reflector0.getGetInvoker("parameterAnnotations");
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(invoker0);
      
      Invoker invoker1 = reflector0.getSetInvoker("declaredAnnotations");
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(invoker1);
      
      boolean boolean0 = reflector0.hasGetter("parameterAnnotations");
      assertFalse(reflector0.hasDefaultConstructor());
      assertTrue(boolean0);
      
      String string1 = "$UK>@QaE@O^h:k";
      // Undeclared exception!
      try { 
        reflector0.getGetInvoker("$UK>@QaE@O^h:k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no getter for property named '$UK>@QaE@O^h:k' in 'class java.lang.reflect.Method'
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Reflector reflector0 = new Reflector(class0);
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      String string0 = "parameterAnnotations";
      Class<?> class1 = reflector0.getSetterType("parameterAnnotations");
      assertFalse(reflector0.hasDefaultConstructor());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class [B", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      String string1 = reflector0.findPropertyName("parameterAnnotations");
      assertFalse(reflector0.hasDefaultConstructor());
      assertEquals("parameterAnnotations", string1);
      assertNotNull(string1);
      
      Invoker invoker0 = reflector0.getGetInvoker("parameterAnnotations");
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(invoker0);
      
      boolean boolean0 = reflector0.hasGetter("parameterAnnotations");
      assertFalse(reflector0.hasDefaultConstructor());
      assertTrue(boolean0);
      
      String string2 = "$UK>@QaE@O^h:k";
      // Undeclared exception!
      try { 
        reflector0.getDefaultConstructor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no default constructor for class java.lang.reflect.Method
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<AmbiguousMethodInvoker> class0 = AmbiguousMethodInvoker.class;
      boolean boolean0 = Reflector.canControlMemberAccessible();
      assertTrue(boolean0);
      
      boolean boolean1 = Reflector.canControlMemberAccessible();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Reflector reflector0 = new Reflector(class0);
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      Class<?> class1 = reflector0.getSetterType("type");
      assertFalse(reflector0.hasDefaultConstructor());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Class", class1.toString());
      assertEquals(17, class1.getModifiers());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Reflector reflector0 = new Reflector(class0);
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      Class<?> class1 = reflector0.getSetterType("parameterAnnotations");
      assertFalse(reflector0.hasDefaultConstructor());
      assertTrue(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class [B", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      boolean boolean0 = reflector0.hasGetter("parameterAnnotations");
      assertFalse(reflector0.hasDefaultConstructor());
      assertTrue(boolean0);
      
      String string0 = "$UK>@QaE@O^h:k";
      // Undeclared exception!
      try { 
        reflector0.getGetInvoker("$UK>@QaE@O^h:k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no getter for property named '$UK>@QaE@O^h:k' in 'class java.lang.reflect.Method'
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Reflector reflector0 = new Reflector(class0);
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      Class<?> class1 = reflector0.getSetterType("parameterAnnotations");
      assertFalse(reflector0.hasDefaultConstructor());
      assertTrue(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class [B", class1.toString());
      assertNotNull(class1);
      
      boolean boolean0 = Reflector.canControlMemberAccessible();
      assertTrue(boolean0);
      
      String string0 = "$UK>@QaE@O^h:k";
      // Undeclared exception!
      try { 
        reflector0.getSetInvoker("$UK>@QaE@O^h:k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no setter for property named '$UK>@QaE@O^h:k' in 'class java.lang.reflect.Method'
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Reflector reflector0 = null;
      try {
        reflector0 = new Reflector((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Reflector reflector0 = new Reflector(class0);
      assertTrue(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      boolean boolean0 = reflector0.hasSetter("END");
      assertTrue(reflector0.hasDefaultConstructor());
      assertFalse(boolean0);
      
      boolean boolean1 = Reflector.canControlMemberAccessible();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = reflector0.findPropertyName("END");
      assertTrue(reflector0.hasDefaultConstructor());
      assertNull(string0);
      
      String string1 = reflector0.findPropertyName("END");
      assertTrue(reflector0.hasDefaultConstructor());
      assertNull(string1);
      
      String[] stringArray0 = reflector0.getGetablePropertyNames();
      assertTrue(reflector0.hasDefaultConstructor());
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = reflector0.getSetablePropertyNames();
      assertTrue(reflector0.hasDefaultConstructor());
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        reflector0.getSetInvoker("END");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no setter for property named 'END' in 'class java.lang.Object'
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Reflector reflector0 = new Reflector(class0);
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      boolean boolean0 = Reflector.canControlMemberAccessible();
      assertTrue(boolean0);
      
      String string0 = "sizeTable";
      Invoker invoker0 = reflector0.getGetInvoker("sizeTable");
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(invoker0);
      
      // Undeclared exception!
      try { 
        reflector0.getSetterType("sizeTable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no setter for property named 'sizeTable' in 'class java.lang.Integer'
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<String> class0 = String.class;
      Reflector reflector0 = new Reflector(class0);
      assertTrue(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        reflector0.findPropertyName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Reflector reflector0 = new Reflector(class0);
      assertTrue(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      String[] stringArray0 = reflector0.getSetablePropertyNames();
      assertTrue(reflector0.hasDefaultConstructor());
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        reflector0.getSetInvoker("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no setter for property named '' in 'class java.lang.Object'
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Reflector reflector0 = new Reflector(class0);
      assertTrue(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      String string0 = reflector0.findPropertyName("'");
      assertTrue(reflector0.hasDefaultConstructor());
      assertNull(string0);
      
      boolean boolean0 = reflector0.hasDefaultConstructor();
      assertTrue(reflector0.hasDefaultConstructor());
      assertTrue(boolean0);
      
      Constructor<?> constructor0 = reflector0.getDefaultConstructor();
      assertTrue(reflector0.hasDefaultConstructor());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      Class<?> class1 = reflector0.getType();
      assertTrue(reflector0.hasDefaultConstructor());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      boolean boolean1 = reflector0.hasGetter("gDHlfShlL!5P2va8x$");
      assertTrue(reflector0.hasDefaultConstructor());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        reflector0.getSetInvoker("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no setter for property named '' in 'class java.lang.Object'
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Reflector reflector0 = new Reflector(class0);
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        reflector0.getDefaultConstructor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no default constructor for class java.lang.reflect.Method
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Reflector reflector0 = new Reflector(class0);
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      String[] stringArray0 = reflector0.getSetablePropertyNames();
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(stringArray0);
      assertEquals(20, stringArray0.length);
      
      // Undeclared exception!
      try { 
        reflector0.getDefaultConstructor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no default constructor for class java.lang.reflect.Method
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Reflector reflector0 = new Reflector(class0);
      assertTrue(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      boolean boolean0 = reflector0.hasDefaultConstructor();
      assertTrue(reflector0.hasDefaultConstructor());
      assertTrue(boolean0);
      
      String string0 = "TH('(@:nVOe-3=E>";
      // Undeclared exception!
      try { 
        reflector0.getSetterType("TH('(@:nVOe-3=E>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no setter for property named 'TH('(@:nVOe-3=E>' in 'class java.lang.Object'
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Reflector reflector0 = new Reflector(class0);
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      // Undeclared exception!
      try { 
        reflector0.getSetInvoker("Expiry time reached before end of output");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no setter for property named 'Expiry time reached before end of output' in 'class java.lang.Integer'
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<MethodInvoker> class0 = MethodInvoker.class;
      Reflector reflector0 = new Reflector(class0);
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      boolean boolean0 = Reflector.canControlMemberAccessible();
      assertTrue(boolean0);
      
      String string0 = "p+{Wl-";
      // Undeclared exception!
      try { 
        reflector0.getGetterType("p+{Wl-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no getter for property named 'p+{Wl-' in 'class org.apache.ibatis.reflection.invoker.MethodInvoker'
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Reflector reflector0 = new Reflector(class0);
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      boolean boolean0 = Reflector.canControlMemberAccessible();
      assertTrue(boolean0);
      
      String string0 = "P5RJXR$4^joB[H_YaT]";
      // Undeclared exception!
      try { 
        reflector0.getSetterType("P5RJXR$4^joB[H_YaT]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no setter for property named 'P5RJXR$4^joB[H_YaT]' in 'class java.lang.Integer'
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Reflector reflector0 = new Reflector(class0);
      assertTrue(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      // Undeclared exception!
      try { 
        reflector0.getGetInvoker("@GNvhC'y>}.b;[%O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no getter for property named '@GNvhC'y>}.b;[%O' in 'class java.lang.Object'
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<SetFieldInvoker> class0 = SetFieldInvoker.class;
      Reflector reflector0 = new Reflector(class0);
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      // Undeclared exception!
      try { 
        reflector0.getSetInvoker("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no setter for property named '' in 'class org.apache.ibatis.reflection.invoker.SetFieldInvoker'
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Reflector reflector0 = new Reflector(class0);
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      // Undeclared exception!
      try { 
        reflector0.getGetterType("[+1@v$'6=.0x'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no getter for property named '[+1@v$'6=.0x'' in 'class java.lang.reflect.Method'
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<AmbiguousMethodInvoker> class0 = AmbiguousMethodInvoker.class;
      Reflector reflector0 = new Reflector(class0);
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      String[] stringArray0 = reflector0.getGetablePropertyNames();
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      boolean boolean0 = reflector0.hasSetter("rP99y<n{d,&I@dN\"{");
      assertFalse(reflector0.hasDefaultConstructor());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<GetFieldInvoker> class0 = GetFieldInvoker.class;
      Reflector reflector0 = new Reflector(class0);
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      boolean boolean0 = reflector0.hasDefaultConstructor();
      assertFalse(reflector0.hasDefaultConstructor());
      assertFalse(boolean0);
      
      boolean boolean1 = reflector0.hasGetter("$hasRealParameterData");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<TypeParameterResolver.GenericArrayTypeImpl> class0 = TypeParameterResolver.GenericArrayTypeImpl.class;
      Reflector reflector0 = new Reflector(class0);
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      // Undeclared exception!
      try { 
        reflector0.getSetterType("[@|_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no setter for property named '[@|_' in 'class org.apache.ibatis.reflection.TypeParameterResolver$GenericArrayTypeImpl'
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = Reflector.canControlMemberAccessible();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<TypeParameterResolver.GenericArrayTypeImpl> class0 = TypeParameterResolver.GenericArrayTypeImpl.class;
      Reflector reflector0 = new Reflector(class0);
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      // Undeclared exception!
      try { 
        reflector0.getGetInvoker("DkXq'.v`wv/IyVp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no getter for property named 'DkXq'.v`wv/IyVp' in 'class org.apache.ibatis.reflection.TypeParameterResolver$GenericArrayTypeImpl'
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Reflector reflector0 = new Reflector(class0);
      assertTrue(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      String[] stringArray0 = reflector0.getGetablePropertyNames();
      assertTrue(reflector0.hasDefaultConstructor());
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = Reflector.canControlMemberAccessible();
      assertTrue(boolean0);
      
      String[] stringArray1 = reflector0.getSetablePropertyNames();
      assertTrue(reflector0.hasDefaultConstructor());
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = reflector0.hasDefaultConstructor();
      assertTrue(reflector0.hasDefaultConstructor());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray2 = reflector0.getSetablePropertyNames();
      assertTrue(reflector0.hasDefaultConstructor());
      assertNotNull(stringArray2);
      assertSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      boolean boolean2 = Reflector.canControlMemberAccessible();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<GetFieldInvoker> class0 = GetFieldInvoker.class;
      Reflector reflector0 = new Reflector(class0);
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      Class<?> class1 = reflector0.getGetterType("type");
      assertFalse(reflector0.hasDefaultConstructor());
      assertEquals("class java.lang.Class", class1.toString());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      String string0 = "org.apache.ibatis.reflection.TypeParameterResolver";
      String string1 = reflector0.findPropertyName("org.apache.ibatis.reflection.TypeParameterResolver");
      assertFalse(reflector0.hasDefaultConstructor());
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        reflector0.getGetterType((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no getter for property named 'null' in 'class org.apache.ibatis.reflection.invoker.GetFieldInvoker'
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Reflector reflector0 = new Reflector(class0);
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      String string0 = "parameterAnnotations";
      Class<?> class1 = reflector0.getSetterType("parameterAnnotations");
      assertFalse(reflector0.hasDefaultConstructor());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals("class [B", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertNotNull(class1);
      
      Invoker invoker0 = reflector0.getGetInvoker("parameterAnnotations");
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(invoker0);
      
      boolean boolean0 = reflector0.hasSetter("parameterAnnotations");
      assertFalse(reflector0.hasDefaultConstructor());
      assertTrue(boolean0);
      
      String string1 = "$UK@QaE@O^hk";
      // Undeclared exception!
      try { 
        reflector0.getGetInvoker("$UK@QaE@O^hk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no getter for property named '$UK@QaE@O^hk' in 'class java.lang.reflect.Method'
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<String> class0 = String.class;
      Reflector reflector0 = new Reflector(class0);
      assertTrue(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      boolean boolean0 = Reflector.canControlMemberAccessible();
      assertTrue(boolean0);
      
      Constructor<?> constructor0 = reflector0.getDefaultConstructor();
      assertTrue(reflector0.hasDefaultConstructor());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      // Undeclared exception!
      try { 
        reflector0.getGetterType("+XXMnw%4(,)EAA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no getter for property named '+XXMnw%4(,)EAA' in 'class java.lang.String'
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Reflector reflector0 = new Reflector(class0);
      assertTrue(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      String[] stringArray0 = reflector0.getGetablePropertyNames();
      assertTrue(reflector0.hasDefaultConstructor());
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = reflector0.getSetablePropertyNames();
      assertTrue(reflector0.hasDefaultConstructor());
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = Reflector.canControlMemberAccessible();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Reflector reflector0 = new Reflector(class0);
      assertFalse(reflector0.hasDefaultConstructor());
      assertNotNull(reflector0);
      
      // Undeclared exception!
      try { 
        reflector0.getDefaultConstructor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no default constructor for class java.lang.reflect.Method
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Reflector reflector0 = new Reflector(class0);
      reflector0.getSetablePropertyNames();
      // Undeclared exception!
      try { 
        reflector0.getSetterType("vWv,VT[P RKh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no setter for property named 'vWv,VT[P RKh' in 'class java.lang.reflect.Method'
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<AmbiguousMethodInvoker> class0 = AmbiguousMethodInvoker.class;
      Reflector reflector0 = new Reflector(class0);
      reflector0.hasSetter("");
      reflector0.getType();
      // Undeclared exception!
      try { 
        reflector0.getSetInvoker("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no setter for property named '' in 'class org.apache.ibatis.reflection.invoker.AmbiguousMethodInvoker'
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Reflector reflector0 = new Reflector(class0);
      reflector0.getGetInvoker("parameterAnnotations");
      reflector0.hasGetter("parameterAnnotations");
      reflector0.getGetInvoker("parameterAnnotations");
      reflector0.getSetterType("parameterAnnotations");
      reflector0.getSetterType("parameterAnnotations");
      reflector0.getSetInvoker("parameterAnnotations");
      // Undeclared exception!
      try { 
        reflector0.getDefaultConstructor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no default constructor for class java.lang.reflect.Method
         //
         verifyException("org.apache.ibatis.reflection.Reflector", e);
      }
  }
}
