/**
 *    Copyright 2009-2020 the original author or authors.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 29 19:04:28 GMT 2020
 */

package org.apache.ibatis.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Enumeration;
import java.util.List;
import java.util.jar.JarInputStream;
import org.apache.ibatis.io.DefaultVFS;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultVFS_ESTest extends DefaultVFS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultVFS defaultVFS0 = new DefaultVFS();
      URL uRL0 = MockURL.getFileExample();
      boolean boolean0 = defaultVFS0.isJar(uRL0, (byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultVFS defaultVFS0 = new DefaultVFS();
      boolean boolean0 = defaultVFS0.isJar((URL) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultVFS defaultVFS0 = new DefaultVFS();
      String string0 = defaultVFS0.getPackagePath("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultVFS defaultVFS0 = new DefaultVFS();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JarInputStream jarInputStream0 = new JarInputStream(dataInputStream0);
      // Undeclared exception!
      try { 
        defaultVFS0.listResources(jarInputStream0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultVFS defaultVFS0 = new DefaultVFS();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 4203);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      JarInputStream jarInputStream0 = new JarInputStream(bufferedInputStream0);
      jarInputStream0.close();
      try { 
        defaultVFS0.listResources(jarInputStream0, "' is both.");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.util.zip.ZipInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultVFS defaultVFS0 = new DefaultVFS();
      // Undeclared exception!
      try { 
        defaultVFS0.list((URL) null, "Cannot load class ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultVFS defaultVFS0 = new DefaultVFS();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("E=AX9~", "", 4475, "t(#z:\"9=qkE[kM", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        defaultVFS0.findJarForResource(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultVFS defaultVFS0 = new DefaultVFS();
      String string0 = defaultVFS0.getPackagePath((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultVFS defaultVFS0 = new DefaultVFS();
      String string0 = defaultVFS0.getPackagePath(" ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultVFS defaultVFS0 = new DefaultVFS();
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ".jar");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("fake\\but\\wellformed\\.jar");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "g<-e/nN~OPp_]N2");
      URL uRL2 = defaultVFS0.findJarForResource(uRL1);
      assertNull(uRL2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultVFS defaultVFS0 = new DefaultVFS();
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JarInputStream jarInputStream0 = new JarInputStream(sequenceInputStream0);
      List<String> list0 = defaultVFS0.listResources(jarInputStream0, "");
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultVFS defaultVFS0 = new DefaultVFS();
      MockFile mockFile0 = new MockFile("C.fB^O><qFAXo*", "C.fB^O><qFAXo*");
      File file0 = MockFile.createTempFile("C.fB^O><qFAXo*", "C.fB^O><qFAXo*", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      JarInputStream jarInputStream0 = new JarInputStream(mockFileInputStream0);
      List<String> list0 = defaultVFS0.listResources(jarInputStream0, "/3GL[,\"4>YLwv");
      assertFalse(list0.contains("/3GL[,\"4>YLwv"));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultVFS defaultVFS0 = new DefaultVFS();
      List<String> list0 = defaultVFS0.list("");
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultVFS defaultVFS0 = new DefaultVFS();
      List<String> list0 = defaultVFS0.list(" ");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultVFS defaultVFS0 = new DefaultVFS();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        defaultVFS0.list(uRL0, "Found JAR: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultVFS defaultVFS0 = new DefaultVFS();
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ".jar");
      URL uRL2 = defaultVFS0.findJarForResource(uRL1);
      assertNull(uRL2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultVFS defaultVFS0 = new DefaultVFS();
      boolean boolean0 = defaultVFS0.isValid();
      assertTrue(boolean0);
  }
}
