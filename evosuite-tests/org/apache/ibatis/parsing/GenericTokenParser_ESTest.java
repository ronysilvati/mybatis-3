/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 29 19:37:43 GMT 2020
 */

package org.apache.ibatis.parsing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.ibatis.parsing.GenericTokenParser;
import org.apache.ibatis.parsing.TokenHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GenericTokenParser_ESTest extends GenericTokenParser_ESTest_scaffolding {

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: O teste em questão verifica se o método parse
   * se comporta como esperado, ao receber uma string que não
   * contém os elementos necessários para fazer o parse.
   * Como no caso da string (::).
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TokenHandler tokenHandler0 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      GenericTokenParser genericTokenParser0 = new GenericTokenParser(":", ":", tokenHandler0);
      String string0 = genericTokenParser0.parse("nWg0h*Iwfz:6_");
      assertEquals("nWg0h*Iwfz:6_", string0);
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Não foi possível definir
   * ----------------------------------------------------------
   * DESCRIÇÃO: Não foi possível definir o comportamento do teste.
   * Aparentemente não foi gerada nenhuma verificação. Por esse
   * motivo, não foi possível definir se o teste em questão é
   * importante para o contexto.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GenericTokenParser genericTokenParser0 = new GenericTokenParser("", "org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler", (TokenHandler) null);
      // Undeclared exception!
      genericTokenParser0.parse("cB Xz$wpp$5");
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Não foi possível definir
   * ----------------------------------------------------------
   * DESCRIÇÃO: Não foi possível definir o comportamento do teste.
   * Aparentemente não foi gerada nenhuma verificação. Por esse
   * motivo, não foi possível definir se o teste em questão é
   * importante para o contexto.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TokenHandler tokenHandler0 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(tokenHandler0).handleToken(anyString());
      GenericTokenParser genericTokenParser0 = new GenericTokenParser("", "", tokenHandler0);
      // Undeclared exception!
      genericTokenParser0.parse("<?S");
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Não foi possível definir
   * ----------------------------------------------------------
   * DESCRIÇÃO: O teste em questão verifica se o método parse
   * funciona como esperado quando em tokenHandler0 é informado
   * um valor nulo, por exemplo.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TokenHandler tokenHandler0 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tokenHandler0).handleToken(anyString());
      GenericTokenParser genericTokenParser0 = new GenericTokenParser("?", "?", tokenHandler0);
      String string0 = genericTokenParser0.parse("H?co?nSbG)b");
      assertEquals("HnullnSbG)b", string0);
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Não
   * ----------------------------------------------------------
   * DESCRIÇÃO: O teste em questão verifica se o método parse
   * se comporta como esperado, ao receber uma string que não
   * contém os elementos necessários para fazer o parse.
   * Como no caso da string (??). O teste em questão é desnecessário,
   * já que o primeiro teste trata esse mesmo problema.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TokenHandler tokenHandler0 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      GenericTokenParser genericTokenParser0 = new GenericTokenParser("?", "?", tokenHandler0);
      String string0 = genericTokenParser0.parse("org.apache.ibatis.parsing.GenericTokenParser");
      assertEquals("org.apache.ibatis.parsing.GenericTokenParser", string0);
  }
}
